Special case for `__traits(parameters)` in foreach loops was removed

Previously, when used inside a `foreach` using an overloaded `opApply`, the trait
would yield the parameters to the delegate and not the function the foreach appears within.

This behaviour is unintuitive, especially when the type of the `foreach` aggregate
depends on a template parameter. Hence `__traits(parameters)` was changed to consistently
return the parameters of the lexically enclosing function.

---
class Tree {
    int opApply(int delegate(size_t, Tree) dg) {
        if (dg(0, this)) return 1;
        return 0;
    }
}
void useOpApply(Tree top, int x)
{
    foreach(idx; 0..5)
    {
        static assert(is(typeof(__traits(parameters)) == AliasSeq!(Tree, int)));
    }

    foreach(idx, elem; top)
    {
        // Previously:
        // static assert(is(typeof(__traits(parameters)) == AliasSeq!(size_t, Tree)));

        // Now:
        static assert(is(typeof(__traits(parameters)) == AliasSeq!(Tree, int)));
    }
}
---
